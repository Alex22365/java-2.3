import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

class Employee {
    String name;
    int age;
    double salary;

    Employee(String name, int age, double salary) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }

    public String toString() {
        return name + " " + age + " " + salary;
    }
}

class Student {
    String name;
    double marks;

    Student(String name, double marks) {
        this.name = name;
        this.marks = marks;
    }
}

class Product {
    String name;
    double price;
    String category;

    Product(String name, double price, String category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }

    public String toString() {
        return name + " " + price + " " + category;
    }
}

public class LambdaStreamDemo {
    public static void main(String[] args) {
        // Part A: Sorting Employee Objects
        List<Employee> employees = new ArrayList<>();
        employees.add(new Employee("Alice", 30, 50000));
        employees.add(new Employee("Bob", 25, 60000));
        employees.add(new Employee("Charlie", 35, 55000));

        employees.sort((e1, e2) -> e1.name.compareTo(e2.name));
        System.out.println("Part A - Sorted by name: " + employees);

        employees.sort((e1, e2) -> Integer.compare(e1.age, e2.age));
        System.out.println("Part A - Sorted by age: " + employees);

        employees.sort((e1, e2) -> Double.compare(e2.salary, e1.salary));
        System.out.println("Part A - Sorted by salary descending: " + employees);

        employees.sort((e1, e2) -> Double.compare(e1.salary, e2.salary));
        System.out.println("Part A - Sorted by salary ascending: " + employees);

        // Part B: Filtering and Sorting Students
        List<Student> students = Arrays.asList(
            new Student("Alice", 80),
            new Student("Bob", 70),
            new Student("Charlie", 90),
            new Student("David", 65),
            new Student("Eve", 85)
        );

        System.out.println("Part B - Students with marks > 75, sorted by marks:");
        students.stream()
            .filter(s -> s.marks > 75)
            .sorted((s1, s2) -> Double.compare(s1.marks, s2.marks))
            .map(s -> s.name)
            .forEach(System.out::println);

        // Part C: Stream Operations on Product Dataset
        List<Product> products = Arrays.asList(
            new Product("Laptop", 1000, "Electronics"),
            new Product("Phone", 500, "Electronics"),
            new Product("Shirt", 50, "Clothing"),
            new Product("Jeans", 80, "Clothing"),
            new Product("TV", 2000, "Electronics"),
            new Product("Hat", 20, "Clothing")
        );

        Map<String, List<Product>> grouped = products.stream()
            .collect(Collectors.groupingBy(p -> p.category));
        System.out.println("Part C - Grouped by category: " + grouped);

        Map<String, Optional<Product>> maxByCategory = products.stream()
            .collect(Collectors.groupingBy(p -> p.category,
                Collectors.maxBy(Comparator.comparingDouble(p -> p.price))));
        System.out.println("Part C - Max by category: " + maxByCategory);

        double average = products.stream()
            .collect(Collectors.averagingDouble(p -> p.price));
        System.out.println("Part C - Average price: " + average);
    }
}
